#lang racket

(require
    "interpreting/interpreter.rkt")

(define run-unit-test
    (lambda (unitTests testsDir)
        (with-handlers
            ([exn?
                (lambda (exn)
                    (if (cadar unitTests)
                        (writeln (format "~a failed; unexpected exception" (caar unitTests)))
                        (writeln (format "~a succeeded" (caar unitTests)))))])
            (let
                ([result
                    (interpret (format "unit_tests/~a/unit_test_~a.txt" testsDir (caar unitTests)))])
                (cond
                    [(eq? (caddar unitTests) result)
                        (writeln (format "~a succeeded" (caar unitTests)))]
                    [(cadar unitTests)
                        (writeln (format "~a failed; expected ~v, got ~v" (caar unitTests) (caddar unitTests) result))]
                    [else
                        (writeln (format "~a did not throw when expected to" (caar unitTests)))])))
        (if (null? (cdr unitTests))
            "Done"
            (run-unit-test (cdr unitTests) testsDir))))

;;; (run-unit-test '(
;;;         ("01" #t 150)
;;;         ("02" #t -4)
;;;         ("03" #t 10)
;;;         ("04" #t 16)
;;;         ("05" #t 220)
;;;         ("06" #t 5)
;;;         ("07" #t 6)
;;;         ("08" #t 10)
;;;         ("09" #t 5)
;;;         ("10" #t -39)
;;;         ("11" #f ())
;;;         ("12" #f ())
;;;         ("13" #f ())
;;;         ("14" #f ())
;;;         ("15" #t true)
;;;         ("16" #t 100)
;;;         ("17" #t false)
;;;         ("18" #t true)
;;;         ("19" #t 128)
;;;         ("20" #t 12)
;;;         ("21" #t 30)
;;;         ("22" #t 11)
;;;         ("23" #t 1106)
;;;         ("24" #t 12)
;;;         ("25" #t 16)
;;;         ("26" #t 72)
;;;         ("27" #t 21)
;;;         ("28" #t 164)
;;;         ("29" #t 20)
;;;         ("30" #t 164)
;;;         ("31" #t 32)
;;;         ("32" #t 2)
;;;         ("33" #f)
;;;         ("34" #t 25)
;;;         ("35" #t 21)
;;;         ("36" #t 6)
;;;         ("37" #t -1)
;;;         ("38" #t 789)
;;;         ("39" #f)
;;;         ("40" #f)
;;;         ("41" #f)
;;;         ("42" #t 12)
;;;         ("43" #t 125)
;;;         ("44" #t 110)
;;;         ("45" #t 2000400)
;;;         ("46" #t 101)
;;;         ("47" #f)
;;;         ("48" #t 21)
;;; ) 'part2)

;;; (run-unit-test '(
;;;     ("01" #t 10)
;;;     ("02" #t 14)
;;;     ("03" #t 45)
;;;     ("04" #t 55)
;;;     ("05" #t 1)
;;;     ("06" #t 115)
;;;     ("07" #t true)
;;;     ("08" #t 20)
;;;     ("09" #t 24)
;;;     ("10" #t 2)
;;;     ("11" #t 35)
;;;     ("12" #f)
;;;     ("13" #t 90)
;;;     ("14" #t 69)
;;;     ("15" #t 87)
;;;     ("16" #t 64)
;;;     ("17" #f)
;;;     ("18" #t 125)
;;;     ("19" #t 100)
;;;     ("20" #t 2000400)
;;; ) 'part3)

(run-unit-test '(
    ("01" #t 15)
    ("02" #t 12)
    ("03" #t 125)
    ("04" #t 36)
    ("05" #t 54)
    ("06" #t 110)
    ("07" #t 26)
    ("08" #t 117)
    ("09" #t 32)
    ("10" #t 14)
    ("11" #t 123456)
    ("12" #t 5285)
    ("13" #t -716)
) 'part4)